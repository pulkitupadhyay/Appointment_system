<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

<style>
  h1{
    text-align: center;
  }
  h2{
    margin-top: 1%;
  }
  .mainDiv h2{
    font-size: 1rem !important  ;
  }
  form input{
    font-size: 1rem !important  ;

  }
  .main{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

#header {
  padding: 10px;
  color: #d36c6c;
  font-size: 26px;
  font-family: sans-serif;
  display: flex;
  justify-content: space-between;
}
#header button {
  background-color:#92a1d1;
}
#container {
  width: 964px;
}
#weekdays {
  width: 100%;
  display: flex;
  color: #247BA0;
}
#weekdays div {
  width: 100px;
  padding: 50px;
  padding-bottom: 0px !important;
}
#calendar {
  width: 100%;
  margin: auto;
  display: flex;
  flex-wrap: wrap;
}
.day {
  width: 100px;
  padding: 10px;
  height: 100px;
  cursor: pointer;
  box-sizing: border-box;
  background-color: white;
  margin: 5px;
  box-shadow: 0px 0px 3px #CBD4C2;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.day:hover {
  background-color: #e8faed;
}

.day + #currentDay {
  background-color:#e8f4fa;
}
.event {
  font-size: 10px;
  padding: 3px;
  background-color: #58bae4;
  color: white;
  border-radius: 5px;
  max-height: 55px;
  overflow: hidden;
}
.padding {
  cursor: default !important;
  background-color: #FFFCFF !important;
  box-shadow: none !important;
}
#newEventModal, #deleteEventModal {
  display: none;
  z-index: 20;
  padding: 25px;
  background-color: #e8f4fa;
  box-shadow: 0px 0px 3px black;
  border-radius: 5px;
  width: 350px;
  top: 100px;
  left: calc(50% - 175px);
  position: absolute;
  font-family: sans-serif;
}
#eventTitleInput {
  padding: 10px;
  width: 100%;
  box-sizing: border-box;
  margin-bottom: 25px;
  border-radius: 3px;
  outline: none;
  border: none;
  box-shadow: 0px 0px 3px gray;
}
#eventTitleInput.error {
  border: 2px solid red;
}
#cancelButton, #deleteButton {
  background-color: #d36c6c;
}
#saveButton, #closeButton {
  background-color: #92a1d1;
}
#eventText {
  font-size: 14px;
}
#modalBackDrop {
  display: none;
  top: 0px;
  left: 0px;
  z-index: 10;
  width: 100vw;
  height: 100vh;
  position: absolute;
  background-color: rgba(0,0,0,0.8);
}

  
</style>
<body>
  <div class="main">

<% function capitalizeFirstLetter(str) { %>
  <% return str.replace(/^\w/, (c) => c.toUpperCase()); %>
<%}%>





<h1 class="my-5" style="font-family: sans-serif; font-weight: bold;" >Book 1 Hour meeting with  <%= capitalizeFirstLetter(employee.name); %> </h1> 




<!--   
  <div class="mainDiv my-4" style="display: flex; padding: 2%; flex-direction: row; justify-content: space-around; width: 100%; flex-wrap: wrap;box-shadow: 0rem 0.5rem 1.5rem 0.5rem rgba(167, 164, 164, 0.7) !important; width: 70%;">
<% let dateOccupied = [] %>
<% if(time_slots.length == 0 ){ %>
<p> sorry!! there is no time slots </p>
<% }else { %>

  <% for(var i=0; i< time_slots.length; i++){  %>
      <div class="my-2" style="border-radius: 1rem; display: flex; flex-direction: column; box-shadow: 0rem 0.5rem 1.5rem 0.5rem rgba(167, 164, 164, 0.7) !important;  padding: 1.5%;">
          

        <% const inputDate = new Date(time_slots[i].from_date);  %>

        
        <% const day = inputDate.getDate().toString().padStart(2, '0');  %>
        <% const month = (inputDate.getMonth() + 1).toString().padStart(2, '0');   %>
        <% const month2 = (inputDate.getMonth() + 1)  %>
        
        <% const year = inputDate.getFullYear().toString().slice(-2);  %>
          
        
        <% const formattedDate = `${day}/${month}/20${year}`;  %>

        <% const formattedDate2 = `${day}/${month2}/20${year}`; %>
          <% dateOccupied.push(formattedDate2) %>
          <h2> <strong> Date </strong>: <%= formattedDate %> </h2>
        



          <h2> <strong> from </strong>: <%= time_slots[i].time %> </h2>


        <%  const inputTime = time_slots[i].time.toString();     %>
        <% const [hours, minutes] = inputTime.split(":");   %>
          
          
        <%  const hoursNumber = parseInt(hours, 10);   %>
        <%  const minutesNumber = parseInt(minutes, 10);   %>
          
        <%         const newHours = (hoursNumber + 1 ) % 24;    %>
        <%  const newMinutes = minutesNumber;   %>
            
        <%  const formattedTime = `${newHours.toString().padStart(2, '0')}:${newMinutes.toString().padStart(2, '0')}`;   %>
          
        <% var current_time = formattedTime;   %>


          <h2> <strong> TO </strong>: <%= current_time %> </h2>



          <form action="/fake_login" method="post" style="display: flex; flex-direction: column;">

              <input type="text" name = 'slot_id' value=" <%= time_slots[i]._id %> " style="display: none;" >
            
              <input type="text" name="employee_id" value="<%= employee._id %>" style="display: none;">

                

              <button type="submit" class="btn-primary my-2" style="border-radius: 2rem; padding: 2%;"> Book This Slot </button> 


          </form>
         

      </div>
  <% } }%>
 
  </div> -->
<!-- 

<div class="my-3" style="display: flex; flex-direction: row; justify-content: center;">


<div class="oneside" style="display: flex; border: 2px solid black;flex-direction: column;padding:1%;">

  <h1> You are booking appointment with  <%= employee.name %> </h1>
  <h1> it is a One hour Meering </h1>

</div>
<div class="secside" style="display: flex; border: 2px solid black; flex-direction: column;padding:1%;">

  <h1>Select Date and Time </h1>
<div style="display: flex; border: 2px solid black; flex-direction: row;padding:1%;">
  <% for(var i=0; i< time_slots.length; i++){  %>
    <div class="mx-2" style="display: flex; flex-direction: row;   padding: 1%; ">
        

       <% const inputDate = new Date(time_slots[i].from_date);  %>

      
       <% const day = inputDate.getDate().toString().padStart(2, '0');  %>
       <% const month = (inputDate.getMonth() + 1).toString().padStart(2, '0');   %>
       <% const year = inputDate.getFullYear().toString().slice(-2);  %>
        
       
       <% const formattedDate = `${day}/${month}/20${year}`;  %>
        
        
       <h1 style="display: flex; border: 2px solid black ; border-radius: 2rem;"> <%=    day  %> </h1>
     
<div class="h1div"> 
  <h1> <%=time_slots[i].time %></h1>
</div>



      <%  const inputTime = time_slots[i].time.toString();     %>
       <% const [hours, minutes] = inputTime.split(":");   %>
        
        
      <%  const hoursNumber = parseInt(hours, 10);   %>
      <%  const minutesNumber = parseInt(minutes, 10);   %>
        
       <%         const newHours = (hoursNumber + 1 ) % 24;    %>
      <%  const newMinutes = minutesNumber;   %>
           
      <%  const formattedTime = `${newHours.toString().padStart(2, '0')}:${newMinutes.toString().padStart(2, '0')}`;   %>
        
       <% var current_time = formattedTime;   %>


     




    </div>
 <% } %>
</div> -->






<div class="mainddddd" style="display: flex; flex-direction: row;box-shadow: 0rem 0.5rem 1.5rem 0.5rem rgba(167, 164, 164, 0.7) !important;  padding: 1.5%;">
<div id="container">
  <div id="header">
    <div id="monthDisplay"></div>
    <div>
      <button id="backButton">Back</button>
      <button id="nextButton">Next</button>
    </div>
  </div>

  <div id="weekdays">
    <div>Sunday</div>
    <div>Monday</div>
    <div>Tuesday</div>
    <div>Wednesday</div>
    <div>Thursday</div>
    <div>Friday</div>
    <div>Saturday</div>
  </div>

  <div id="calendar"></div>
</div>

<div id="newEventModal">
  <h2>New Event</h2>

  <input id="eventTitleInput" placeholder="Event Title" />

  <button id="saveButton">Save</button>
  <button id="cancelButton">Cancel</button>
</div>

<div id="deleteEventModal">
  <h2>Event</h2>

  <p id="eventText"></p>

  <button id="deleteButton">Delete</button>
  <button id="closeButton">Close</button>
</div>

<div id="modalBackDrop"></div>




<div class="last_for_display_time" style="width: 25%; padding-top: 6%;"></div>

</div>
</div>
<script >

var timeS = <%- JSON.stringify(dateOccupied) %>;
var time_slots = <%- JSON.stringify(time_slots) %>;

console.log(time_slots)

  let nav = 0;
let clicked = null;
// let events = localStorage.getItem('events') ? JSON.parse(localStorage.getItem('events')) : [];

const calendar = document.getElementById('calendar');
const newEventModal = document.getElementById('newEventModal');
const deleteEventModal = document.getElementById('deleteEventModal');
const backDrop = document.getElementById('modalBackDrop');
const eventTitleInput = document.getElementById('eventTitleInput');
const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];



function load() {
const dt = new Date();

if (nav !== 0) {
dt.setMonth(new Date().getMonth() + nav);
}

const day = dt.getDate();
const month = dt.getMonth();
const year = dt.getFullYear();
const month1 = (dt.getMonth() + 1).toString().padStart(2, '0');

const firstDayOfMonth = new Date(year, month, 1);
const daysInMonth = new Date(year, month + 1, 0).getDate();

const dateString = firstDayOfMonth.toLocaleDateString('en-us', {
weekday: 'long',
year: 'numeric',
month: 'numeric',
day: 'numeric',
});
const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);
console.log(paddingDays + 'a;sldkfja;sldkfj')
document.getElementById('monthDisplay').innerText = 
`${dt.toLocaleDateString('en-us', { month: 'long' })} ${year}`;

calendar.innerHTML = '';






for(let i = 1; i <= paddingDays + daysInMonth; i++) {
const daySquare = document.createElement('div');
daySquare.classList.add('day');


if (i > paddingDays) {
  daySquare.innerText = i - paddingDays;
  // const eventForDay = events.find(e => e.date === dayString);
   const dayString = `${i - paddingDays}/${month + 1}/${year}`;
   const parts = dayString.split('/');
   const formattedDate = `${parts[0].padStart(2, '0')}/${month + 1}/${parts[2]}`;
 console.log('this is daystring'+ formattedDate)
  
 daySquare.classList.add(`day_${i - paddingDays}`);
 
 
 async function theF(){
  if (i - paddingDays === day && nav === 0) {
        daySquare.id = 'currentDay';
      }
 
 
      if (await timeS.includes(formattedDate)) {

        const searchTerm = i - paddingDays ;
console.log('this is st' + searchTerm)
  console.log(`${dayString} is present in the array.`);

document.querySelector(`.day_${i - paddingDays}`).style.backgroundColor = "green"

document.querySelector(`.day_${i - paddingDays}`).addEventListener('click',async ()=>{
console.log(i - paddingDays + 'ddddddd' )




const results = await time_slots.filter(item => item.from_date[8] + item.from_date[9] === searchTerm.toString().padStart(2, '0'));
var times = [];
console.log(results )

document.querySelector('.last_for_display_time').innerHTML = ``;

for(var f=0; f<= results.length ; f++){ 
console.log(results[f])
 document.querySelector('.last_for_display_time').innerHTML += `


 
      <div class="my-2" style="border-radius: 1rem;justify-content:center; align-items:center; width:100%; display: flex; flex-direction: column; box-shadow: 0rem 0.5rem 1.5rem 0.5rem rgba(167, 164, 164, 0.7) !important;  padding: 1.5%;">
          <h1>${results[f].time}</h1>

      <form action="/fake_login" method="post" style="display: flex; flex-direction: column;justify-content:center; align-items:center;">

              <input type="text" name = 'slot_id' value="${results[f]._id}" style="display: none;" >
            
              <input type="text" name="employee_id" value="<%= employee._id %>" style="display: none;">

                

              <button type="submit" class="btn-primary my-2" style="border-radius: 2rem; padding: 1%;width:100%;"> Book This Slot </button> 


          </form>
         

      </div>
  
 `;
}


})





}
}








  theF();
  // daySquare.addEventListener('click', () => openModal(dayString));
} else {
  daySquare.classList.add('padding');
}

calendar.appendChild(daySquare);    
}



}




function initButtons() {
document.getElementById('nextButton').addEventListener('click', () => {
nav++;
load();
});

document.getElementById('backButton').addEventListener('click', () => {
nav--;
load();
});

}








initButtons();


load();




// function saveEvent() {
// if (eventTitleInput.value) {
// eventTitleInput.classList.remove('error');

// events.push({
//   date: clicked,
//   title: eventTitleInput.value,
// });

// localStorage.setItem('events', JSON.stringify(events));
// closeModal();
// } else {
// eventTitleInput.classList.add('error');
// }
// }

// function deleteEvent() {
// events = events.filter(e => e.date !== clicked);
// localStorage.setItem('events', JSON.stringify(events));
// closeModal();
// }


// document.getElementById('saveButton').addEventListener('click', saveEvent);
// document.getElementById('cancelButton').addEventListener('click', closeModal);
// document.getElementById('deleteButton').addEventListener('click', deleteEvent);
// document.getElementById('closeButton').addEventListener('click', closeModal);
// }

// initButtons();
// load();

</script>


<script>
    const mainDiv = document.querySelector('.mainDiv');
const childDivs = Array.from(mainDiv.children);

childDivs.sort((a, b) => {
  const dateA = parseDate(a.querySelector('h1').textContent);
  const dateB = parseDate(b.querySelector('h1').textContent);
  return dateA - dateB;
});

childDivs.forEach(div => mainDiv.appendChild(div));

function parseDate(dateString) {
  const [day, month, year] = dateString.split('/').map(Number);
  return new Date(year + 2000, month - 1, day); // Converting to comparable format
}
</script>
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
</body>
</html>